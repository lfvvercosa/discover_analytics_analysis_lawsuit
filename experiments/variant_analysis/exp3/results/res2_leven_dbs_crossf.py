from scipy.cluster import hierarchy 
from sklearn.metrics import adjusted_rand_score
from sklearn.metrics import v_measure_score
import matplotlib.pyplot as plt

from experiments.variant_analysis.CustomAgglomClust import CustomAgglomClust
from experiments.variant_analysis.utils.Utils import Utils


def get_dict_var(dict_gd):
    dict_var = {}

    for k in dict_gd:
        dict_var[k] = []

        for i in dict_gd[k]:
            dict_var[k] += dict_gd[k][i]
    

    return dict_var


dend = [([19], [9], 1.0), ([19, 9], [11], 1.0), ([27], [32], 1.0), ([7], [8], 1.0), ([7, 8], [14], 1.0), ([7, 8, 14], [15], 1.0), ([3], [6], 1.0), ([72], [70], 1.0), ([35], [25], 0.9667), ([24], [0], 0.95), ([16], [24, 0], 0.9444), ([26], [27, 32], 0.9375), ([26, 27, 32], [30], 0.9375), ([13], [18], 0.9375), ([35, 25], [34], 0.925), ([26, 27, 32, 30], [3, 6], 0.9219), ([7, 8, 14, 15], [23], 0.9219), ([5], [21], 0.9), ([29], [35, 25, 34], 0.9), ([2], [20], 0.8889), ([12], [37], 0.875), ([2, 20], [5, 21], 0.875), ([66], [68], 0.875), ([59], [53], 0.8667), ([26, 27, 32, 30, 3, 6], [12, 37], 0.8646), ([7, 8, 14, 15, 23], [39], 0.8625), ([7, 8, 14, 15, 23, 39], [28], 0.8929), ([31], [1], 0.8583), ([31, 1], [19, 9, 11], 0.8396), ([31, 1, 19, 9, 11], [13, 18], 0.9413), ([31, 1, 19, 9, 11, 13, 18], [7, 8, 14, 15, 23, 39, 28], 0.9232), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28], [26, 27, 32, 30, 3, 6, 12, 37], 0.9099), ([50], [62], 0.8295), ([51], [57], 0.8182), ([44], [56], 0.8112), ([43], [44, 56], 0.8271), ([2, 20, 5, 21], [16, 24, 0], 0.8018), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37], [2, 20, 5, 21, 16, 24, 0], 0.801), ([29, 35, 25, 34], [33], 0.7917), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0], [29, 35, 25, 34, 33], 0.8226), ([51, 57], [59, 53], 0.7614), ([51, 57, 59, 53], [58], 0.8375), ([43, 44, 56], [51, 57, 59, 53, 58], 0.8055), ([43, 44, 56, 51, 57, 59, 53, 58], [50, 62], 0.8049), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33], [4], 0.752), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62], [60], 0.7462), ([36], [38], 0.7292), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4], [36, 38], 0.7928), ([64], [65], 0.6875), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60], [52], 0.6718), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52], [66, 68], 0.6662), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68], [54], 0.6409), ([63], [61], 0.6333), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54], [64, 65], 0.6226), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65], [63, 61], 0.6186), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38], [41], 0.6038), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41], [10], 0.5905), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41, 10], [42], 0.6122), ([47], [45], 0.5625), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61], [47, 45], 0.6881), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45], [46], 0.5341), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46], [55], 0.4954), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55], [49], 0.4817), ([43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55, 49], [48], 0.467), ([69], [72, 70], 0.45), ([69, 72, 70], [43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55, 49, 48], 0.4077), ([69, 72, 70, 43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55, 49, 48], [71], 0.3744), ([69, 72, 70, 43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55, 49, 48, 71], [67], 0.3616), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41, 10, 42], [40], 0.2982), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41, 10, 42, 40], [17], 0.0566), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41, 10, 42, 40, 17], [22], 0.0554), ([31, 1, 19, 9, 11, 13, 18, 7, 8, 14, 15, 23, 39, 28, 26, 27, 32, 30, 3, 6, 12, 37, 2, 20, 5, 21, 16, 24, 0, 29, 35, 25, 34, 33, 4, 36, 38, 41, 10, 42, 40, 17, 22], [69, 72, 70, 43, 44, 56, 51, 57, 59, 53, 58, 50, 62, 60, 52, 66, 68, 54, 64, 65, 63, 61, 47, 45, 46, 55, 49, 48, 71, 67], -0.31)]
y_true = [11, 13, 11, 13, 13, 12, 12, 12, 11, 11, 12, 12, 13, 13, 13, 13, 13, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 11, 11, 13, 13, 13, 11, 11, 11, 13, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 12, 12, 12, 11, 12, 11, 13, 13, 12, 12, 12, 12, 12, 12, 11, 11, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 13, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 13, 13, 13, 11, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 22, 21, 22, 21, 22, 22, 21, 21, 22, 21, 22, 22, 21, 22, 22, 21, 22, 22, 21, 22, 21, 22, 21, 22, 22, 21, 21, 22, 22, 22, 21, 22, 22, 22, 22, 21, 22, 22, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]
traces = ['ABCDEFBGLLBGBLGLBGLBGBLGLBGJKL', 'ABCDEFBGNLJKF', 'ABCDEFBLGLBGJKL', 'ABCDEFBNGLBNLGJKF', 'ABCDEFBNLGJKF', 'ABCDEFGBLJL', 'ABCDEFGLBJK', 'ABCDEFGLBJL', 'ABCDEFLBGJLK', 'ABCDEFLBGLBGJKL', 'ABCDEFLGBJK', 'ABCDEFLGBJL', 'ABCDEFNBGLNBGLBNLGJKF', 'ABCDEFNBLGBNGLBGNLJKF', 'ABCDEFNBLGBNGLJKF', 'ABCDEFNBLGJKF', 'ABCDEFNBLGNLBGJKF', 'ABCDEFNJK', 'ABCDEFNJKL', 'ABCDEFNJLK', 'ABCDEFNLBGJKF', 'ABCDEFNLBGNLBGBNLGJKF', 'ABCEDFBGNLJKF', 'ABCEDFBGNLNBLGBNLGNBLGNBLGBNLGJKF', 'ABCEDFBNLGBNLGNBGLBNGLNBLGNBLGJKF', 'ABCEDFNBLGJKF', 'ABCEDFNBLGNLBGBGNLBNGLJKF', 'ABCEDFNJKL', 'ABCEDFNJLK', 'ABCEDFNLBGBNLGNBGLJKF', 'ABCEDFNLBGJKF', 'ABDCEFBGNLJKF', 'ABDCEFBLGBGLBLGJKL', 'ABDCEFBLGJLK', 'ABDCEFBLGLBGJKL', 'ABDCEFBNGLJKF', 'ABDCEFBNLGBNGLNLBGNBGLBNLGNLBGNBGLJKF', 'ABDCEFBNLGBNLGJKF', 'ABDCEFBNLGJKF', 'ABDCEFBNLGNLBGJKF', 'ABDCEFGBGBLGBJL', 'ABDCEFGBLGBGBJL', 'ABDCEFGBLGBJL', 'ABDCEFGLBJL', 'ABDCEFLBGBLGJLK', 'ABDCEFLBGJKL', 'ABDCEFLGBGBGBGBGBJK', 'ABDCEFLGBJL', 'ABDCEFNJK', 'ABDCEFNJKL', 'ABDCEFNJL', 'ABDCEFNJLK', 'ABDCEFNLBGNBLGBGNLJKF', 'ABDCEFNLBGNLBGJKF', 'ABDECFGLBGBJL', 'ABDECFGLBJL', 'ABDECFLGBJK', 'ABDECFLGBJL', 'ABDECFNJK', 'ABDECFNJL', 'ACBDEFBGLLBGBGLLBGBLGJKL', 'ACBDEFBGLLBGJKL', 'ACBDEFBGNLJKF', 'ACBDEFBGNLNBGLNLBGJKF', 'ACBDEFBNGLNLBGJKF', 'ACBDEFNBGLJKF', 'ACBDEFNBLGBGNLJKF', 'ACBDEFNJKL', 'ACBDEFNJLK', 'ACBEDFBGLLBGBGLLBGLBGJLK', 'ACBEDFBGNLJKF', 'ACBEDFBLGJKL', 'ACBEDFBNGLBNLGBGNLNBGLNBLGJKF', 'ACBEDFLBGJLK', 'ACBEDFNBGLNLBGJKF', 'ACBEDFNBLGJKF', 'ACBEDFNJKL', 'ACBEDFNLBGJKF', 'ACEBDFBGLBLGLBGBLGJLK', 'ACEBDFBGLJLK', 'ACEBDFBGLLBGJKL', 'ACEBDFBGLLBGLBGBGLLBGJKL', 'ACEBDFBGLLBGLBGJKL', 'ACEBDFBGNLBGNLJKF', 'ACEBDFBGNLBNGLJKF', 'ACEBDFBGNLJKF', 'ACEBDFBGNLNBLGBGNLNLBGJKF', 'ACEBDFLBGJLK', 'ACEBDFNBGLJKF', 'ACEBDFNBLGJKF', 'ACEBDFNBLGNLBGJKF', 'ACEBDFNJKL', 'ACEBDFNJLK', 'ACEBDFNLBGBGNLJKF', 'ACEBDFNLBGNBGLJKF', 'ADBCEFGBLJK', 'ADBCEFGLBGBGBJK', 'ADBCEFLGBGBJK', 'ADBCEFLGBGBJL', 'ADBCEFLGBJL', 'ADBCEFNJK', 'ADBECFGBLGBGBGBGBJL', 'ADBECFGLBJK', 'ADBECFLGBGBJK', 'ADBECFLGBJK', 'ADBECFNJK', 'ADEBCFLGBGBGBGBGBGBJL', 'ADEBCFLGBJK', 'ADEBCFNJK', 'ADEBCFNJL', 'PQRABBCGJZKV', 'PQRABBCGZ', 'PQRABBCGZJKV', 'PQRABBCGZV', 'PQRABBGCJZKV', 'PQRABBGCZVJK', 'PQRABBGZCV', 'PQRABCBGJK', 'PQRABCBGJZVK', 'PQRABCBGZ', 'PQRABCBGZJKV', 'PQRABCBGZVJK', 'PQRABGJKBC', 'PQRABGJKBZVC', 'PQRABGJZKBVC', 'PQRABGZBC', 'PQRABGZVBJKC', 'PQRABGZVJBCK', 'PQRBABCGJK', 'PQRBABCGJZKV', 'PQRBABCGZ', 'PQRBABCGZJKV', 'PQRBABCGZV', 'PQRBABGJKCZV', 'PQRBABGJKZVC', 'PQRBAGBJKC', 'PQRBAGJBCK', 'PQRBAGZBJVKC', 'PQRBGABCJZKV', 'PQRBGABJCZKV', 'PQRBGAJKBC', 'PQRBGAJZBCVK', 'PQRBGAJZBVCK', 'PQRBGAZBJCKV', 'PQRBGJABKZVC', 'PQRBGJKABC', 'PQRBGJZKVABC', 'PQRBGJZVKABC', 'PQRBGZVABC', 'PQRPQRABBCGJKZV', 'PQRPQRABBCGZJKV', 'PQRPQRABBGZCJVK', 'PQRPQRABBGZJVCK', 'PQRPQRABCBGZJVK', 'PQRPQRABGBJZVCK', 'PQRPQRBABCGJZVK', 'PQRPQRBABCGZVJK', 'PQRPQRBABGZVJCK', 'PQRPQRBAGBZVCJK', 'PQRPQRBAGJZKBVC', 'PQRPQRBGJKZABCV', 'PQRPQRBGJKZVABC', 'PQRPQRPQRABBGZJVKC', 'PQRPQRPQRABCBGZVJK', 'PQRPQRPQRBABCGZJVK', 'PQRPQRPQRPQRABBGCZJKV', 'PQRPQRPQRPQRABGJKZVBC', 'PQRPQRPQRPQRPQRBABCGJKZV', 'PQRPQRPQRPQRPQRBAGJKZVBC', 'PQRQRABBGCZ', 'PQRQRABGBCZV', 'PQRQRBABCGJK', 'PQRQRBABCGZ', 'PQRQRBABGCJK', 'PQRQRBABGZC', 'PQRQRBABGZCV', 'PQRQRBAGJBCK', 'PQRQRBAGJBKC', 'PQRQRBAGJKBC', 'PQRQRBAGZBC', 'PQRQRBAGZBVC', 'PQRQRBGAZVBC', 'PQRQRBGJAKBC', 'PQRQRBGZABC', 'PQRQRQRABCBGJK', 'PQRQRQRABCBGZV', 'PQRQRQRABGZBC', 'PQRQRQRBABGCJK', 'PQRQRQRBABGZC', 'PQRQRQRBAGJBCK', 'PQRQRQRBGAJBCK', 'PQRQRQRBGJABCK', 'PQRQRQRBGZVABC', 'PQRQRQRQRQRABCBGZV', 'PQRQRQRQRQRBAGJBKC', 'PQRQRQRQRQRQRBAGZBC', 'PQRQRQRQRQRQRQRBGJKABC', 'PQRQRQRQRQRQRQRQRQRBAGZBC']
dict_gd = {0: {'G11': ['ABCDEFBGLLBGBLGLBGLBGBLGLBGJKL']}, 1: {'G13': ['ABCDEFBGNLJKF', 'ABCDEFBNLGJKF', 'ABCDEFNBLGJKF', 'ABCDEFNLBGJKF', 'ABCEDFBGNLJKF', 'ABCEDFNBLGJKF', 'ABCEDFNLBGJKF', 'ABDCEFBGNLJKF', 'ABDCEFBNGLJKF', 'ABDCEFBNLGJKF', 'ACBDEFBGNLJKF', 'ACBDEFNBGLJKF', 'ACBEDFBGNLJKF', 'ACBEDFNBLGJKF', 'ACBEDFNLBGJKF', 'ACEBDFBGNLJKF', 'ACEBDFNBGLJKF', 'ACEBDFNBLGJKF'], 'G11': ['ACBEDFBLGJKL']}, 2: {'G11': ['ABCDEFBLGLBGJKL', 'ABCDEFLBGLBGJKL', 'ABDCEFBLGLBGJKL']}, 3: {'G13': ['ABCDEFBNGLBNLGJKF']}, 4: {'G12': ['ABCDEFGBLJL', 'ABCDEFGLBJK', 'ABCDEFGLBJL', 'ABCDEFLGBJK', 'ABCDEFLGBJL', 'ABDCEFGBGBLGBJL', 'ABDCEFGBLGBGBJL', 'ABDCEFGBLGBJL', 'ABDCEFGLBJL', 'ABDCEFLGBJL', 'ABDECFGLBGBJL', 'ABDECFGLBJL', 'ABDECFLGBJK', 'ABDECFLGBJL', 'ADBCEFGLBGBGBJK', 'ADBCEFLGBGBJK', 'ADBCEFLGBGBJL', 'ADBCEFLGBJL', 'ADBECFGLBJK', 'ADBECFLGBGBJK', 'ADBECFLGBJK', 'ADEBCFLGBJK']}, 5: {'G11': ['ABCDEFLBGJLK']}, 6: {'G13': ['ABCDEFNBGLNBGLBNLGJKF']}, 7: {'G13': ['ABCDEFNBLGBNGLBGNLJKF']}, 8: {'G13': ['ABCDEFNBLGBNGLJKF']}, 9: {'G13': ['ABCDEFNBLGNLBGJKF']}, 10: {'G12': ['ABCDEFNJK', 'ABDCEFNJK', 'ABDCEFNJL', 'ABDECFNJK', 'ABDECFNJL', 'ADBCEFNJK', 'ADBECFNJK', 'ADEBCFNJK', 'ADEBCFNJL'], 'G11': ['ABCDEFNJKL', 'ABCDEFNJLK', 'ABCEDFNJKL', 'ABCEDFNJLK', 'ABDCEFNJKL', 'ABDCEFNJLK', 'ACBDEFNJKL', 'ACBDEFNJLK', 'ACBEDFNJKL', 'ACEBDFNJKL', 'ACEBDFNJLK']}, 11: {'G13': ['ABCDEFNLBGNLBGBNLGJKF']}, 12: {'G13': ['ABCEDFBGNLNBLGBNLGNBLGNBLGBNLGJKF']}, 13: {'G13': ['ABCEDFBNLGBNLGNBGLBNGLNBLGNBLGJKF']}, 14: {'G13': ['ABCEDFNBLGNLBGBGNLBNGLJKF']}, 15: {'G13': ['ABCEDFNLBGBNLGNBGLJKF']}, 16: {'G11': ['ABDCEFBLGBGLBLGJKL']}, 17: {'G11': ['ABDCEFBLGJLK']}, 18: {'G13': ['ABDCEFBNLGBNGLNLBGNBGLBNLGNLBGNBGLJKF']}, 19: {'G13': ['ABDCEFBNLGBNLGJKF', 'ABDCEFBNLGNLBGJKF', 'ABDCEFNLBGNLBGJKF']}, 20: {'G11': ['ABDCEFLBGBLGJLK']}, 21: {'G11': ['ABDCEFLBGJKL']}, 22: {'G12': ['ABDCEFLGBGBGBGBGBJK']}, 23: {'G13': ['ABDCEFNLBGNBLGBGNLJKF']}, 24: {'G11': ['ACBDEFBGLLBGBGLLBGBLGJKL']}, 25: {'G11': ['ACBDEFBGLLBGJKL', 'ACEBDFBGLLBGJKL']}, 26: {'G13': ['ACBDEFBGNLNBGLNLBGJKF']}, 27: {'G13': ['ACBDEFBNGLNLBGJKF']}, 28: {'G13': ['ACBDEFNBLGBGNLJKF']}, 29: {'G11': ['ACBEDFBGLLBGBGLLBGLBGJLK']}, 30: {'G13': ['ACBEDFBNGLBNLGBGNLNBGLNBLGJKF']}, 31: {'G11': ['ACBEDFLBGJLK', 'ACEBDFBGLJLK', 'ACEBDFLBGJLK']}, 32: {'G13': ['ACBEDFNBGLNLBGJKF']}, 33: {'G11': ['ACEBDFBGLBLGLBGBLGJLK']}, 34: {'G11': ['ACEBDFBGLLBGLBGBGLLBGJKL']}, 35: {'G11': ['ACEBDFBGLLBGLBGJKL']}, 36: {'G13': ['ACEBDFBGNLBGNLJKF', 'ACEBDFBGNLBNGLJKF']}, 37: {'G13': ['ACEBDFBGNLNBLGBGNLNLBGJKF']}, 38: {'G13': ['ACEBDFNBLGNLBGJKF']}, 39: {'G13': ['ACEBDFNLBGBGNLJKF', 'ACEBDFNLBGNBGLJKF']}, 40: {'G12': ['ADBCEFGBLJK']}, 41: {'G12': ['ADBECFGBLGBGBGBGBJL']}, 42: {'G12': ['ADEBCFLGBGBGBGBGBGBJL']}, 43: {'G22': ['PQRABBCGJZKV', 'PQRABBCGZJKV', 'PQRABBGCJZKV', 'PQRABBGCZVJK', 'PQRABCBGJZVK', 'PQRABCBGZJKV', 'PQRABCBGZVJK', 'PQRBABCGJZKV', 'PQRBABCGZJKV', 'PQRBGABCJZKV', 'PQRBGABJCZKV', 'PQRBGAZBJCKV'], 'G21': ['PQRABBCGZ', 'PQRABBCGZV', 'PQRABBGZCV', 'PQRABCBGJK', 'PQRABCBGZ', 'PQRBABCGJK', 'PQRBABCGZ', 'PQRBABCGZV', 'PQRBAGJBCK', 'PQRQRBABCGJK', 'PQRQRBABCGZ', 'PQRQRBABGCJK', 'PQRQRBABGZC', 'PQRQRBABGZCV', 'PQRQRBAGJBCK', 'PQRQRBAGJBKC', 'PQRQRBAGJKBC', 'PQRQRBAGZBC', 'PQRQRBAGZBVC', 'PQRQRBGAZVBC', 'PQRQRBGJAKBC', 'PQRQRBGZABC', 'PQRQRQRABGZBC', 'PQRQRQRBABGCJK', 'PQRQRQRBABGZC', 'PQRQRQRBAGJBCK', 'PQRQRQRBGAJBCK', 'PQRQRQRBGJABCK']}, 44: {'G21': ['PQRABGJKBC', 'PQRABGZBC', 'PQRBGAJKBC', 'PQRBGJKABC', 'PQRBGZVABC'], 'G22': ['PQRABGJKBZVC', 'PQRABGJZKBVC', 'PQRBABGJKCZV', 'PQRBABGJKZVC', 'PQRBGJZKVABC', 'PQRBGJZVKABC']}, 45: {'G22': ['PQRABGZVBJKC']}, 46: {'G22': ['PQRABGZVJBCK']}, 47: {'G21': ['PQRBAGBJKC'], 'G22': ['PQRBAGZBJVKC']}, 48: {'G22': ['PQRBGAJZBCVK', 'PQRBGAJZBVCK']}, 49: {'G22': ['PQRBGJABKZVC']}, 50: {'G22': ['PQRPQRABBCGJKZV', 'PQRPQRABBCGZJKV']}, 51: {'G22': ['PQRPQRABBGZCJVK', 'PQRPQRABBGZJVCK', 'PQRPQRABCBGZJVK']}, 52: {'G22': ['PQRPQRABGBJZVCK']}, 53: {'G22': ['PQRPQRBABCGJZVK', 'PQRPQRBABCGZVJK', 'PQRPQRBABGZVJCK']}, 54: {'G22': ['PQRPQRBAGBZVCJK']}, 55: {'G22': ['PQRPQRBAGJZKBVC']}, 56: {'G22': ['PQRPQRBGJKZABCV', 'PQRPQRBGJKZVABC']}, 57: {'G22': ['PQRPQRPQRABBGZJVKC']}, 58: {'G22': ['PQRPQRPQRABCBGZVJK']}, 59: {'G22': ['PQRPQRPQRBABCGZJVK']}, 60: {'G22': ['PQRPQRPQRPQRABBGCZJKV']}, 61: {'G22': ['PQRPQRPQRPQRABGJKZVBC']}, 62: {'G22': ['PQRPQRPQRPQRPQRBABCGJKZV']}, 63: {'G22': ['PQRPQRPQRPQRPQRBAGJKZVBC']}, 64: {'G21': ['PQRQRABBGCZ']}, 65: {'G21': ['PQRQRABGBCZV']}, 66: {'G21': ['PQRQRQRABCBGJK', 'PQRQRQRABCBGZV']}, 67: {'G21': ['PQRQRQRBGZVABC']}, 68: {'G21': ['PQRQRQRQRQRABCBGZV']}, 69: {'G21': ['PQRQRQRQRQRBAGJBKC']}, 70: {'G21': ['PQRQRQRQRQRQRBAGZBC']}, 71: {'G21': ['PQRQRQRQRQRQRQRBGJKABC']}, 72: {'G21': ['PQRQRQRQRQRQRQRQRQRBAGZBC']}}

utils = Utils()
agglomClust = CustomAgglomClust()
Z = agglomClust.gen_Z(dend)

# config 2, considering only the two major clusters
y_true2 = [0 if x < 20 else 1 for x in y_true]
dict_var = get_dict_var(dict_gd)

# get best number of clusters
t = max(Z[:,2])

min_perc = 0.4
max_perc = 0.9
step_perc = 0.025
perc = min_perc

best_ARI = -1
best_Vm = -1
best_perc = -1
best_y_pred = []


while perc <= max_perc:
    labels = hierarchy.fcluster(Z=Z, t=perc*t, criterion='distance')

    # get performance by adjusted rand-score metric
    
    y_pred = utils.get_agglom_labels_by_trace(traces, dict_var, labels)

    ARI = adjusted_rand_score(y_true2, y_pred)
    Vm = v_measure_score(y_true2, y_pred)

    if ARI > best_ARI:
        best_ARI = ARI
        best_Vm = Vm
        best_perc = perc
        best_y_pred = y_pred.copy()

    perc += step_perc


best_ARI = round(best_ARI, 4)
best_Vm = round(best_Vm, 4)
best_perc = round(best_perc, 4)

print('best ARI: ' + str(best_ARI))
print('best Vm: ' + str(best_Vm))
print('best perc: ' + str(best_perc))

agglomClust = CustomAgglomClust()
Z = agglomClust.gen_Z(dend)

hierarchy.dendrogram(Z,color_threshold=max(Z[:,2])*best_perc)
plt.show(block=True)
plt.close()
